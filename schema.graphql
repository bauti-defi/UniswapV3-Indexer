type Block @entity {
    id: ID!
    chainId: Int! @index
    blockNumber: Int! @index
    timestamp: DateTime! @index

    transactions: [Transaction]! @derivedFrom(field: "block")
}

type Transaction @entity {
    id: ID!
    block: Block! 
    hash: String! @index
    to: String @index
    from: String @index
    status: Int @index
    gasUsed: BigInt!

    swaps: [Swap]! @derivedFrom(field: "transaction")
    mintPositions: [MintPosition]! @derivedFrom(field: "transaction")
    decreasePositionLiquidity: [DecreasePositionLiquidity]! @derivedFrom(field: "transaction")
    collectPositions: [CollectionPosition]! @derivedFrom(field: "transaction")
}

type Pool @entity {
    id: ID!
    chainId: Int! @index
    token0: String! @index
    token1: String! @index
    fee: Int! @index
    poolAddress: String! @index

    swaps: [Swap]! @derivedFrom(field: "pool")
    mintPositions: [MintPosition]! @derivedFrom(field: "pool")
    decreasePositionLiquidity: [DecreasePositionLiquidity]! @derivedFrom(field: "pool")
    collectPositions: [CollectionPosition]! @derivedFrom(field: "pool")
}

type MintPosition @entity {
    id: ID!
    transaction: Transaction!
    pool: Pool!
    tickLower: Int!
    tickUpper: Int!
    amount0: BigInt!
    amount1: BigInt!
    liquidity: BigInt!
    tokenId: BigInt! @index
    recipient: String @index
}

type Swap @entity {
    id: ID!
    transaction: Transaction!
    pool: Pool!
    recipient: String @index
    amount0: BigInt!
    amount1: BigInt!
    sqrtPriceX96: BigInt! @index
    liquidity: BigInt!
    tick: Int! @index
}

type DecreasePositionLiquidity @entity {
    id: ID!
    transaction: Transaction!
    pool: Pool!
    tokenId: BigInt! @index
    tickLower: Int! @index
    tickUpper: Int! @index
    liquidityDelta: BigInt!
    amount0: BigInt!
    amount1: BigInt!
}

type CollectionPosition @entity {
    id: ID!
    transaction: Transaction!
    pool: Pool!
    tokenId: BigInt! @index
    recipient: String @index
    tickLower: Int! @index
    tickUpper: Int! @index
    amount0Collected: BigInt!
    amount1Collected: BigInt!
}